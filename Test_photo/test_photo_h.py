from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.inline_keyboard import InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite_db.UserDB as user
from Test_photo import key as test_key
from Test_photo import sql_commands as sq
from client import bot
import Keyboard as key


class FSMtest(StatesGroup):
    updel = State()
    agreement = State()
    add_file = State()

# standart_keys-----------------------------------------


async def start_test(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ö–∞–ª—è–≤—ã", reply_markup=test_key.morebtn)


async def back_to_menu(message: types.Message):
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", reply_markup=key.Inline_key)


async def more(message: types.Message):
    if(sq.get_user_try_number(message.from_user.id) <= sq.max_s_photo()):
        photo = sq.get_one(message.from_user.id)
        await bot.send_photo(message.from_user.id, photo=photo, caption=f'_–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ñ–æ—Ç–æ:_ *{(sq.max_s_photo() - sq.get_user_try_number(message.from_user.id))+2}*', parse_mode='MarkdownV2')
    else:
        await bot.send_message(message.from_user.id,
                               "*–í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å*\n\n–í—ã –º–æ–∂–µ—Ç–µ ‚úÖ*–∫—É–ø–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–æ–≤*‚úÖ, —á—Ç–æ–±—ã –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–±—è, –ª–∏–±–æ –∂–µ –∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n‚ôªÔ∏è_*–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ*_‚ôªÔ∏è",
                               parse_mode='MarkdownV2')


async def test_photo_edit(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∫–∞–∑–æ–≤", reply_markup=test_key.admin_menu)


async def back_to_admin(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã –≤ –º–µ–Ω—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=key.admin)

# DEL_and_ADD_file------------------------------------


async def del_file(message: types.Message):
    keys = sq.get_all_file()
    global temp_keys_in_test_photo
    temp_keys_in_test_photo = InlineKeyboardMarkup(row_width=1)
    for i in keys:
        temp_keys_in_test_photo.insert(
            InlineKeyboardButton(text=i[0], callback_data=i[0]))
    await FSMtest.updel.set()
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–∞–ª—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç", reply_markup=temp_keys_in_test_photo)


async def proof(callback_query: types.CallbackQuery, state=FSMContext):
    photo = sq.send_file_prev(callback_query.data)
    async with state.proxy() as dt:
        dt['photo_id'] = photo
    agree = InlineKeyboardMarkup(row_width=1).row(InlineKeyboardButton(
        text="–î–∞", callback_data="yes"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no"))
    await FSMtest.next()
    await bot.send_photo(callback_query.from_user.id, photo=photo[0], caption="–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?", reply_markup=agree)


async def yes_on_proof(callback_query: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as dt:
        sq.del_file(dt['photo_id'][0])
    await state.finish()
    await bot.send_message(callback_query.from_user.id, "–§–æ—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ!")


async def no_on_proof(callback_query: types.CallbackQuery, state=FSMContext):
    await state.finish()
    await FSMtest.updel.set()
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–∞–ª—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç", reply=temp_keys_in_test_photo)
# -----------------------------------------------------------


async def add_file(message: types.Message):
    await FSMtest.add_file.set()
    await bot.send_message(message.from_user.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")


async def upload_file(message: types.Message, state=FSMContext):
    sq.add_file(message.photo[0].file_id)
    await state.finish()
    await bot.send_message(message.from_user.id, "–§–æ—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—â–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")


def register_test_photo(dp: Dispatcher):
    dp.register_message_handler(
        start_test, text="üî•üî•üî• –•–∞–ª—è–≤–Ω—ã–µ –ù—é–¥—Å—ã üî•üî•üî•")
    dp.register_message_handler(back_to_menu, text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    dp.register_message_handler(more, text="üîûNudesüîû")
    dp.register_message_handler(
        test_photo_edit, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    dp.register_message_handler(back_to_admin, text="–ù–∞–∑–∞–¥")
    # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª-------------------------------------------------------
    dp.register_message_handler(del_file, text="–£–¥–∞–ª–∏—Ç—å", state=None)
    dp.register_callback_query_handler(proof, state=FSMtest.updel)
    dp.register_callback_query_handler(
        yes_on_proof, text='yes', state=FSMtest.agreement)
    dp.register_callback_query_handler(
        no_on_proof, text='no', state=FSMtest.agreement)
    # –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª-------------------------------------------------------
    dp.register_message_handler(add_file, text="–î–æ–±–∞–≤–∏—Ç—å", state=None)
    dp.register_message_handler(upload_file, content_types=[
                                'photo'], state=FSMtest.add_file)
