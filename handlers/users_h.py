from aiogram import Dispatcher, types
from sqlite_db import UserDB as user
import Keyboard as key
from client import bot, ADMIN_ID
from sqlite_db import main_data as data
from sqlite_db import moneyDB as money
from handlers.FAQ_h import keyboard


def Check_Call(call):
    cat = data.get_keyboard()
    for row in cat:
        if row[0] == call:
            return True


async def command_start(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        f"*{message.from_user.first_name}*, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ",
        parse_mode="MarkdownV2",
    )
    if message.get_args() != "":
        user.Check_id(message.from_user.id, message.get_args())
        await bot.send_message(
            message.from_user.id,
            f'{message.from_user.first_name}, –ø–æ—Å–∫–æ–ª—å–∫—É—é –í—ã –≤–ø–µ—Ä–≤—ã–µ –∑–∞—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω <a href="https://t.me/OS_store_bot">OS Store</a>, –ø–æ–∂–∞—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–∞–∑–¥–µ–ª–æ–º "FAQ" –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞!',
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    else:
        user.Check_id(message.from_user.id)

    await bot.send_message(
        message.from_user.id, "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=key.Inline_key
    )


async def MainMenu(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
        reply_markup=key.Inline_key,
    )


async def admin(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await bot.send_message(
            message.from_user.id,
            "–í—ã –≤ _*–º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*_\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            parse_mode="MarkdownV2",
            reply_markup=key.admin,
        )


async def inline(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "_*–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é*_",
        parse_mode="MarkdownV2",
        reply_markup=key.categories,
    )


async def category(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_text(
        text="_*–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é*_",
        parse_mode="MarkdownV2",
        reply_markup=key.categories,
    )


async def inline_menu_back(callback_query: types.CallbackQuery):
    user_category = user.get_last_category(callback_query.from_user.id)
    Girl = key.get_girls_key(user_category)
    await callback_query.message.delete()
    await bot.send_message(
        callback_query.from_user.id,
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: <i>{user_category}</i>",
        parse_mode="HTML",
        reply_markup=Girl,
    )


async def some_callback_handler(callback_query: types.CallbackQuery):
    if Check_Call(callback_query.data) == True:
        Girl = key.get_girls_key(callback_query.data)
        user.write_last_category(callback_query.from_user.id, callback_query.data)
        await bot.answer_callback_query(callback_query.id)
        await callback_query.message.edit_text(
            text=f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: <i>{callback_query.data}</i>",
            parse_mode="HTML",
            reply_markup=Girl,
        )
    else:
        await callback_query.message.delete()
        await data.print_card(callback_query.data, callback_query.from_user.id)


async def refer_info(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "<a href='https://telegra.ph/Kak-zarabotat-na-referalnoj-sisteme-04-23'>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ ü§î</a>",
        parse_mode="HTML",
    )


async def profile(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "üì± <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
        + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        + f"üîë –ú–æ–π ID: <code>{message.from_user.id}</code>\n"
        + f"üë§ –õ–æ–≥–∏–Ω @{message.from_user.username}\n"
        + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        + f"üí≥ –ë–∞–ª–∞–Ω—Å: <code>{money.get_balans(message.from_user.id)}</code> —Ä—É–±\n"
        + f"üíµ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: <code>{money.get_all_money(message.from_user.id)}</code> —Ä—É–±\n"
        + f"üéÅ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{money.get_purchased(message.from_user.id)}</code> —à—Ç\n"
        + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        + f"üíé–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/OS_store_bot?start={message.from_user.id}\n"
        + f"üîó–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{money.get_referal(message.from_user.id)}</code> —á–µ–ª\n"
        + f"üí∞–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{money.get_money_via_refer(message.from_user.id)}</code> —Ä—É–±",
        disable_web_page_preview=True,
        parse_mode="HTML",
        reply_markup=key.profile,
    )


def register_handlers_users(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=["start"])
    dp.register_message_handler(admin, commands=["admin"])
    dp.register_message_handler(inline, text="üõí –¢–æ–≤–∞—Ä")
    dp.register_message_handler(MainMenu, text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    dp.register_message_handler(profile, text="üì± –ü—Ä–æ—Ñ–∏–ª—å")
    dp.register_message_handler(refer_info, text="üí∞ –•–æ—á—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å üí∞")
    dp.register_callback_query_handler(category, text="category")
    dp.register_callback_query_handler(inline_menu_back, text="Back")
    dp.register_callback_query_handler(
        some_callback_handler, lambda callback_query: True
    )
